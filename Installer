#!/bin/bash

# ##################################################################
#  AcreetionOS Arch Linux Installation Script
#
#  Author: AI Assistant
#  Version: 28.0 (Final)
#
#  !!! DANGER !!!
#  This is a LIVE installer and will make PERMANENT, DESTRUCTIVE
#  changes to your system's storage. It is NOT a simulation.
#  USE WITH EXTREME CAUTION. Back up all data before proceeding.
# ##################################################################

# --- Configuration ---
LOG_FILE="acreetionos-install.log"

# --- Dialog Color/Style Codes ---
C_ERASE="\Zb\Z1ERASE\Zn"
C_DANGER_BG="--colors --backtitle \Zb\Z1DANGER\Zn"

# --- Global State Variables ---
NETWORK_CONFIGURED=false
DISK_CONFIGURED=false
USER_CONFIGURED=false
INSTALLATION_COMPLETE=false

# --- Global Configuration Variables ---
TARGET_DISK=""
ARCH_PART_SIZE="50"
HOSTNAME=""
USERNAME=""
USER_PASSWORD=""
DUAL_BOOT_MODE=false
INSTALL_MODE=""
KERNEL_PACKAGE="linux"

# --- Helper Functions ---
run_cmd() {
    # stdbuf ensures output is line-buffered for the log, making tailbox more responsive
    stdbuf -oL -eL "$@" >> "$LOG_FILE" 2>&1
    return $?
}

# --- TUI Functions ---
tui_welcome() { dialog --backtitle "AcreetionOS Installer" --title "Welcome & Warning" --msgbox "Welcome to the AcreetionOS Installer.\n\nThis script will make PERMANENT changes to your disk. Use with extreme caution.\n\nIt is HIGHLY recommended to back up your data before proceeding. All actions are logged to '$LOG_FILE'." 14 70; }
tui_network() { while true; do CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Network Configuration" --cancel-label "Back" --menu "Select an option:" 15 55 3 1 "Connect to Wi-Fi" 2 "Use Wired Ethernet (or check status)" 3 "Continue (Already Connected)" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; case "$CHOICE" in 1) dialog --backtitle "AcreetionOS Installer" --infobox "Scanning for Wi-Fi networks..." 4 40; sleep 1; local networks=("AcreetionWiFi" "Strong" "CinnamonNet" "Medium" "Public WiFi" "Weak"); WIFI_CHOICE=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --menu "Choose a network:" 15 50 4 "${networks[@]}" 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; WIFI_PASS=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --passwordbox "Enter password for $WIFI_CHOICE:" 8 40 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; dialog --backtitle "AcreetionOS Installer" --infobox "Connecting..." 4 40; ping -c 1 archlinux.org >/dev/null 2>&1; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; timedatectl set-ntp true >/dev/null 2>&1; NETWORK_CONFIGURED=true; return;; 2) dialog --backtitle "AcreetionOS Installer" --infobox "Checking connection..." 4 40; ping -c 1 archlinux.org >/dev/null 2>&1; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; timedatectl set-ntp true >/dev/null 2>&1; NETWORK_CONFIGURED=true; return;; 3) NETWORK_CONFIGURED=true; return;; esac; done; }
tui_disk() { local windows_disk=""; mapfile -t devices < <(lsblk -dno NAME); if [ ${#devices[@]} -eq 0 ]; then dialog --title "Error" --msgbox "No disks found. Cannot proceed." 8 40; return; fi; for d in "${devices[@]}"; do if lsblk -fno FSTYPE "/dev/$d" | grep -iq "ntfs"; then windows_disk="/dev/$d"; break; fi; done; local -a disk_options=(); for dev_path in "/dev/"*; do if [[ -b "$dev_path" ]] && [[ "$(lsblk -dno TYPE "$dev_path")" == "disk" ]]; then local label=""; [ "$dev_path" == "$windows_disk" ] && label=" (Windows Detected)"; disk_options+=("$dev_path" "$(lsblk -dno SIZE,MODEL "$dev_path")$label"); fi; done; TARGET_DISK=$(dialog --backtitle "AcreetionOS Installer" --title "Disk Selection" --cancel-label "Back" --radiolist "Select the physical disk for installation:" 20 70 5 "${disk_options[@]}" "on" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; DISK_CONFIGURED=true; }
tui_user() { while true; do HOSTNAME=$(dialog --backtitle "AcreetionOS Installer" --title "System Configuration" --cancel-label "Back" --inputbox "Enter the hostname for this computer:" 8 60 "$HOSTNAME" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; [ -n "$HOSTNAME" ] && break || dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Hostname cannot be empty." 6 40; done; while true; do USERNAME=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --cancel-label "Back" --inputbox "Enter your username.\n\nThis user will have administrative rights (sudo)." 10 60 "$USERNAME" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; [ -n "$USERNAME" ] && break || dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Username cannot be empty." 6 40; done; while true; do local pass1; pass1=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --insecure --cancel-label "Back" --passwordbox "Enter the password for user '$USERNAME':" 8 60 2>&1 >/dev/tty); [ $? -ne 0 ] && return; local pass2; pass2=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --insecure --cancel-label "Back" --passwordbox "Confirm the password:" 8 60 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; if [ -z "$pass1" ]; then dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Password cannot be empty. Please try again." 6 40; continue; fi; if [ "$pass1" != "$pass2" ]; then dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Passwords do not match. Please try again." 6 40; continue; fi; USER_PASSWORD=$pass1; break; done; USER_CONFIGURED=true; }
tui_review_and_install() { local review_text="Review your configuration:\n\n"; review_text+="    - Target Disk:    $TARGET_DISK\n"; review_text+="    - Hostname:       $HOSTNAME\n"; review_text+="    - Admin User:     $USERNAME\n"; review_text+="\nThis will completely erase $TARGET_DISK and install AcreetionOS."; dialog --backtitle "AcreetionOS Installer" --title "Final Confirmation" --yesno "$review_text" 15 60; return $?; }

# --- Installation Engine ---
partition_and_format() {
    run_cmd echo "# --- Wiping and Partitioning Disk: $TARGET_DISK ---"
    umount -R /mnt 2>/dev/null || true
    umount ${TARGET_DISK}* 2>/dev/null || true
    run_cmd wipefs -a "$TARGET_DISK" || { run_cmd echo "FATAL: Failed to wipe target disk."; return 1; }
    fdisk "$TARGET_DISK" >> "$LOG_FILE" 2>&1 <<EOF
g
n
1

+512M
t
1
n
2


w
EOF
    if [ $? -ne 0 ]; then run_cmd echo "# FATAL: fdisk partitioning failed."; return 1; fi
    run_cmd udevadm settle
    local efi_part="${TARGET_DISK}1"; local root_part="${TARGET_DISK}2"
    if [[ $TARGET_DISK == *"nvme"* ]]; then efi_part="${TARGET_DISK}p1"; root_part="${TARGET_DISK}p2"; fi
    if ! [ -b "$efi_part" ] || ! [ -b "$root_part" ]; then run_cmd echo "# FATAL: Could not find partitions after running fdisk."; return 1; fi
    run_cmd wipefs -a "$efi_part" || { run_cmd echo "FATAL: Failed to wipe EFI partition."; return 1; }
    run_cmd wipefs -a "$root_part" || { run_cmd echo "FATAL: Failed to wipe root partition."; return 1; }
    run_cmd mkfs.fat -F32 "$efi_part" || { run_cmd echo "FATAL: mkfs.fat failed on EFI partition."; return 1; }
    run_cmd mkfs.ext4 -F -q "$root_part" || { run_cmd echo "FATAL: mkfs.ext4 failed on root partition."; return 1; }
    run_cmd mount "$root_part" /mnt || { run_cmd echo "FATAL: Failed to mount root partition $root_part."; return 1; }
    run_cmd mkdir -p /mnt/boot || { run_cmd echo "FATAL: Failed to create /mnt/boot directory."; return 1; }
    run_cmd mount "$efi_part" /mnt/boot || { run_cmd echo "FATAL: Failed to mount EFI partition $efi_part."; return 1; }
    return 0
}

install_base_system() {
    echo "# --- Installing AcreetionOS Base System ---" >> "$LOG_FILE"
    cat > /tmp/pacman.conf <<EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional
[acreetionOSREPO]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch
[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch
[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
EOF
    local pkgs_to_install=("base" "$KERNEL_PACKAGE" "linux-firmware" "mkinitcpio" "sudo" "nano" "networkmanager" "git" "grub" "efibootmgr")
    stdbuf -oL -eL pacstrap -C /tmp/pacman.conf -K /mnt "${pkgs_to_install[@]}" 2>&1 | tee -a "$LOG_FILE" | dialog --backtitle "AcreetionOS Installer" --title "Installing Base System (Live)" --programbox 30 100
    local exit_code=${PIPESTATUS[0]}
    rm /tmp/pacman.conf
    clear
    return $exit_code
}

configure_chroot() {
    run_cmd echo "# --- Preparing Chroot Configuration Script ---"
    cat > /mnt/setup_chroot.sh <<'EOF'
#!/bin/bash
set -e
HOSTNAME=$1; USERNAME=$2; USER_PASSWORD=$3
echo "--- Configuring base system ---"
ln -sf /usr/share/zoneinfo/UTC /etc/localtime; hwclock --systohc
sed -i 's/^#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen; locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "${HOSTNAME}" > /etc/hostname
cat > /etc/hosts <<HOSTS_EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   ${HOSTNAME}.localdomain ${HOSTNAME}
HOSTS_EOF
echo "--- Recreating pacman.conf for new system ---"
cat > /etc/pacman.conf <<PACMAN_EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional
[acreetionOSREPO]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch
[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch
[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
PACMAN_EOF
pacman -Sy
echo "--- Setting up user accounts and sudo ---"
passwd -l root
useradd -m -G wheel -s /bin/bash "${USERNAME}"; echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
echo "--- Branding system as AcreetionOS ---"
sed -i 's/NAME="Arch Linux"/NAME="AcreetionOS"/' /etc/os-release
sed -i 's/PRETTY_NAME="Arch Linux"/PRETTY_NAME="AcreetionOS"/' /etc/os-release
sed -i 's/ID=arch/ID=acreetionos/' /etc/os-release
echo "--- Installing core desktop environment ---"
CORE_PKGS="cinnamon lightdm lightdm-gtk-greeter calamares-config gnome-terminal firefox webapp-manager bluez bluez-utils blueman cups"
pacman -S --noconfirm --needed ${CORE_PKGS}
echo "--- Re-generating initramfs to prevent kernel panic ---"
mkinitcpio -P
echo "--- Installing and configuring GRUB bootloader ---"
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=AcreetionOS
grub-mkconfig -o /boot/grub/grub.cfg
echo "--- Enabling essential system services ---"
systemctl enable lightdm.service; systemctl enable NetworkManager.service; systemctl enable cups.service; systemctl enable bluetooth.service
echo "--- Chroot configuration complete ---"
EOF
    chmod +x /mnt/setup_chroot.sh
    run_cmd echo "# --- Executing Chroot Configuration ---"
    stdbuf -oL -eL arch-chroot /mnt /setup_chroot.sh "$HOSTNAME" "$USERNAME" "$USER_PASSWORD" >> "$LOG_FILE" 2>&1 &
    local chroot_pid=$!
    (echo 100) | dialog --backtitle "AcreetionOS Installer" --title "Final Configuration" --gauge "Installing AcreetionOS unique packages, please be patient." 10 70 100
    wait $chroot_pid
    local exit_code=$?
    run_cmd rm /mnt/setup_chroot.sh
    clear
    return $exit_code
}

# --- Main TUI Loop ---
main() {
    if ! command -v dialog &> /dev/null; then echo "Error: The 'dialog' package is required." >&2; exit 1; fi
    > "$LOG_FILE"
    tui_welcome
    while true; do
        if [ "$INSTALLATION_COMPLETE" = true ]; then
            clear; exit 0
        fi
        local menu_options=( 1 "Configure Network" 2 "Select Disk" 3 "Setup User & Hostname" 4 "Review and Install" )
        CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Main Menu" --cancel-label "Exit" --menu "Complete the steps in order." 20 70 4 "${menu_options[@]}" 2>&1 >/dev/tty)
        if [ $? -ne 0 ]; then clear; exit 0; fi
        case "$CHOICE" in
            1) tui_network ;;
            2) tui_disk ;;
            3) tui_user ;;
            4)
                if ! $NETWORK_CONFIGURED || ! $DISK_CONFIGURED || ! $USER_CONFIGURED; then
                    dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Please complete all previous steps before proceeding." 8 50
                elif tui_review_and_install; then
                    if dialog $C_DANGER_BG --title "!!! POINT OF NO RETURN !!!" --yesno "You are about to partition disk ${TARGET_DISK} and install AcreetionOS.\n\nTHIS CANNOT BE UNDONE.\n\nAll selected data will be destroyed. Are you absolutely, positively sure you want to proceed?" 12 70; then
                        clear
                        ( echo 10; echo "### Partitioning and formatting disk... ###" ) | dialog --title "Installation Step 1/4" --gauge "Please wait..." 10 70 0
                        partition_and_format; [ $? -ne 0 ] && { clear; dialog --title "FATAL ERROR" --msgbox "Installation failed. Check $LOG_FILE" 8 50; exit 1; }
                        install_base_system; [ $? -ne 0 ] && { clear; dialog --title "FATAL ERROR" --msgbox "Installation failed. Check $LOG_FILE" 8 50; exit 1; }
                        ( echo 75; echo "### Generating fstab... ###" ) | dialog --title "Installation Step 3/4" --gauge "Please wait..." 10 70 0
                        run_cmd genfstab -U /mnt >> /mnt/etc/fstab; [ $? -ne 0 ] && { clear; dialog --title "FATAL ERROR" --msgbox "Installation failed. Check $LOG_FILE" 8 50; exit 1; }
                        configure_chroot; [ $? -ne 0 ] && { clear; dialog --title "FATAL ERROR" --msgbox "Installation failed. Check $LOG_FILE" 8 50; exit 1; }
                        clear
                        dialog --backtitle "AcreetionOS Installer" --title "Complete!" --msgbox "AcreetionOS installation finished successfully!\n\nRemove the installation medium and reboot." 8 60
                        INSTALLATION_COMPLETE=true
                    fi
                fi
                ;;
        esac
    done
}

# --- Start Script Execution ---
main "$@"
