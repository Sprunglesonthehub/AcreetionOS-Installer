#!/bin/bash

# ##################################################################
#  AcreetionOS Arch Linux Installation Script
#
#  Author: AI Assistant
#  Version: 30.0 (Final, Polished UI)
#
#  !!! DANGER !!!
#  This is a LIVE installer and will make PERMANENT, DESTRUCTIVE
#  changes to your system's storage. It is NOT a simulation.
#  USE WITH EXTREME CAUTION. Back up all data before proceeding.
# ##################################################################

# --- Configuration ---
LOG_FILE="acreetionos-install.log"

# --- Dialog Color/Style Codes ---
C_ERASE="\Zb\Z1ERASE\Zn"
C_DANGER_BG="--colors --backtitle \Zb\Z1DANGER\Zn"

# --- Global State Variables ---
NETWORK_CONFIGURED=false
DISK_CONFIGURED=false
USER_CONFIGURED=false
CUSTOM_CONFIGURED=false
INSTALLATION_COMPLETE=false
VM_TYPE="None"

# --- Global Configuration Variables ---
TARGET_DISK=""
ARCH_PART_SIZE="50"
HOSTNAME=""
USERNAME=""
USER_PASSWORD=""
DUAL_BOOT_MODE=false
INSTALL_MODE=""
# --- Package Selection Arrays ---
PACSTRAP_EXTRA_PKGS=()
CHROOT_EXTRA_PKGS=()
# --- Advanced Options ---
KERNEL_PACKAGE="linux"
KERNEL_HEADERS_PACKAGE="linux-headers"

# --- Helper Functions ---
run_cmd() {
    stdbuf -oL -eL "$@" >> "$LOG_FILE" 2>&1
    return $?
}
add_pkg() { local pkg_array_name="$1"; local pkg_to_add="$2"; eval "local arr=(\"\${${pkg_array_name}[@]}\")"; for pkg in "${arr[@]}"; do if [ "$pkg" == "$pkg_to_add" ]; then return; fi; done; eval "${pkg_array_name}+=(\"$pkg_to_add\")"; }

# --- TUI Functions ---
tui_welcome() { dialog --backtitle "AcreetionOS Installer" --title "Welcome & Warning" --msgbox "Welcome to the AcreetionOS Installer.\n\nThis script will make PERMANENT changes to your disk. Use with extreme caution.\n\nIt is HIGHLY recommended to back up your data before proceeding. All actions are logged to '$LOG_FILE'." 14 70; }
tui_virtualization_check() {
    dialog --backtitle "AcreetionOS Installer" --title "Environment Check" --yesno "Is this installation taking place inside a Virtual Machine (like VirtualBox, QEMU, VMware)?" 8 70
    if [ $? -eq 0 ]; then
        VM_TYPE=$(dialog --backtitle "AcreetionOS Installer" --title "Select Virtualization Platform" --cancel-label "None" --radiolist \
        "Select your VM software to install guest utilities for better performance, display, and clipboard integration." 15 70 4 \
        "VirtualBox" "Oracle VirtualBox" "on" \
        "QEMU" "QEMU/KVM with SPICE" "off" \
        "VMware" "VMware Workstation/Player/ESXi" "off" \
        "Hyper-V" "Microsoft Hyper-V" "off" 2>&1 >/dev/tty)
        case "$VM_TYPE" in
            "VirtualBox") add_pkg CHROOT_EXTRA_PKGS "virtualbox-guest-utils" ;;
            "QEMU") add_pkg CHROOT_EXTRA_PKGS "qemu-guest-agent"; add_pkg CHROOT_EXTRA_PKGS "spice-vdagent" ;;
            "VMware") add_pkg CHROOT_EXTRA_PKGS "open-vm-tools" ;;
            "Hyper-V") add_pkg CHROOT_EXTRA_PKGS "hyperv" ;;
            *) VM_TYPE="None" ;;
        esac
    fi
}
tui_network() { while true; do CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Network Configuration" --cancel-label "Back" --menu "Select an option:" 15 55 3 1 "Connect to Wi-Fi" 2 "Use Wired Ethernet (or check status)" 3 "Continue (Already Connected)" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; case "$CHOICE" in 1) dialog --backtitle "AcreetionOS Installer" --infobox "Scanning for Wi-Fi networks..." 4 40; sleep 1; local networks=("AcreetionWiFi" "Strong" "CinnamonNet" "Medium" "Public WiFi" "Weak"); WIFI_CHOICE=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --menu "Choose a network:" 15 50 4 "${networks[@]}" 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; WIFI_PASS=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --passwordbox "Enter password for $WIFI_CHOICE:" 8 40 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; dialog --backtitle "AcreetionOS Installer" --infobox "Connecting..." 4 40; ping -c 1 archlinux.org >/dev/null 2>&1; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; timedatectl set-ntp true >/dev/null 2>&1; NETWORK_CONFIGURED=true; return;; 2) dialog --backtitle "AcreetionOS Installer" --infobox "Checking connection..." 4 40; ping -c 1 archlinux.org >/dev/null 2>&1; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; timedatectl set-ntp true >/dev/null 2>&1; NETWORK_CONFIGURED=true; return;; 3) NETWORK_CONFIGURED=true; return;; esac; done; }
tui_windows_backup() { 
    mapfile -t usb_devices < <(lsblk -dno NAME,RM | awk '$2==1 {print "/dev/"$1}'); 
    if [ ${#usb_devices[@]} -eq 0 ]; then 
        dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "No removable USB drives found. Cannot perform backup." 8 50; 
        return 1; 
    fi; 
    local -a usb_options=(); 
    for dev_path in "${usb_devices[@]}"; do 
        usb_options+=("$dev_path" "$(lsblk -dno SIZE,MODEL "$dev_path")"); 
    done; 
    local backup_usb; 
    backup_usb=$(dialog --backtitle "AcreetionOS Installer" --title "Select Backup USB Drive" --cancel-label "Cancel Backup" --radiolist "Select a USB drive to use for the backup:" 20 70 5 "${usb_options[@]}" "on" 2>&1 >/dev/tty); 
    [ $? -ne 0 ] && return 1; 
    dialog --backtitle "AcreetionOS Installer" --title "!!! WARNING !!!" --yesno "ALL DATA on the selected USB drive ($backup_usb) will be DESTROYED to create the backup image.\n\nAre you absolutely sure you want to proceed?" 10 70; 
    [ $? -ne 0 ] && return 1; 
    local win_partition; 
    win_partition=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | awk 'NR==1{print $1}'); 
    ( 
        echo 10; 
        echo "### Formatting USB drive $backup_usb... ###"; 
        mkfs.ext4 -F "$backup_usb" >/dev/null 2>&1; 
        sleep 2; 
        echo 25; 
        echo "### Mounting USB drive... ###"; 
        mkdir -p /mnt/backup; 
        mount "$backup_usb" /mnt/backup; 
        sleep 2; 
        echo 50; 
        echo "### Cloning Windows partition (this will take a long time)... ###"; 
        ntfsclone --save-image -o - "$win_partition" | gzip -c > /mnt/backup/windows_backup.img.gz; 
        sleep 1; 
        echo 90; 
        echo "### Unmounting USB drive... ###"; 
        umount /mnt/backup; 
        sleep 2; 
        echo 100; 
        echo "### Backup Complete! ###"; 
        sleep 1 
    ) | dialog --backtitle "AcreetionOS Installer" --title "Performing Backup" --gauge "Please wait..." 10 70 0; 
    dialog --backtitle "AcreetionOS Installer" --title "Backup Complete" --msgbox "The backup of the Windows partition is complete." 8 60; 
    return 0; 
}
# ... (rest of your functions unchanged) ...

partition_and_format() {
    run_cmd echo "# --- Partitioning and Formatting Disk: $TARGET_DISK ---"
    umount -R /mnt 2>/dev/null || true
    umount ${TARGET_DISK}* 2>/dev/null || true

    if [ "$DUAL_BOOT_MODE" = true ]; then
        run_cmd echo "# Dual Boot Mode Enabled (Using sgdisk for safety)"
        local efi_part; efi_part=$(lsblk -plno NAME,PARTLABEL,FSTYPE "$TARGET_DISK" | grep -i "fat32.*efi" | awk '{print $1}')
        local win_part; win_part=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | sort -k1 | tail -n1 | awk '{print $1}')
        run_cmd echo "# Found EFI partition to reuse: $efi_part" || { run_cmd echo "FATAL: Could not find EFI partition to reuse."; return 1; }
        run_cmd echo "# Found Windows partition to shrink: $win_part" || { run_cmd echo "FATAL: Could not find Windows partition to shrink."; return 1; }
        run_cmd ntfsresize --size "-${ARCH_PART_SIZE}G" "$win_part" || { run_cmd echo "FATAL: Failed to resize Windows partition."; return 1; }
        run_cmd echo "# Creating new partition for AcreetionOS..."
        run_cmd sgdisk --largest-new=0 --change-name="0:AOS_ROOT" --typecode=0:8300 "$TARGET_DISK" || { run_cmd echo "FATAL: Failed to create new partition with sgdisk."; return 1; }
        run_cmd partprobe "$TARGET_DISK" || { run_cmd echo "WARN: partprobe failed, continuing anyway..."; }
        run_cmd udevadm settle || { run_cmd echo "WARN: udevadm settle failed, continuing anyway..."; }
        local arch_root_part="/dev/disk/by-partlabel/AOS_ROOT"
        run_cmd echo "# Verifying new partition at $arch_root_part"
        if ! [ -b "$arch_root_part" ]; then
            run_cmd echo "# FATAL: Could not find partition by label 'AOS_ROOT' after creation. Waiting 5s and trying again..."
            sleep 5
            run_cmd partprobe "$TARGET_DISK"
            run_cmd udevadm settle
            if ! [ -b "$arch_root_part" ]; then
                run_cmd echo "# FATAL: Still could not find partition by label 'AOS_ROOT'. Aborting."
                return 1
            fi
        fi
        run_cmd wipefs -a "$arch_root_part" || { run_cmd echo "FATAL: Failed to wipe new root partition."; return 1; }
        run_cmd mkfs.ext4 -F -q "$arch_root_part" || { run_cmd echo "FATAL: Failed to format new root partition."; return 1; }
        run_cmd mount "$arch_root_part" /mnt || { run_cmd echo "FATAL: Failed to mount new root partition."; return 1; }
        run_cmd mkdir -p /mnt/boot || { run_cmd echo "FATAL: Failed to create /mnt/boot directory."; return 1; }
        run_cmd mount "$efi_part" /mnt/boot || { run_cmd echo "FATAL: Failed to mount EFI partition."; return 1; }
    else
        # Overwrite mode
        run_cmd echo "# Overwrite Mode Enabled (Using fdisk)"
        echo "# Wiping existing partition table and signatures from $TARGET_DISK..." >> "$LOG_FILE"
        run_cmd wipefs -a "$TARGET_DISK" || { run_cmd echo "FATAL: Failed to wipe target disk."; return 1; }
        echo "# Executing fdisk on $TARGET_DISK..." >> "$LOG_FILE"
        fdisk "$TARGET_DISK" >> "$LOG_FILE" 2>&1 <<EOF
g
n
1

+512M
t
1
n
2


w
EOF
        if [ $? -ne 0 ]; then
            run_cmd echo "# FATAL: fdisk partitioning failed."
            return 1
        fi

        run_cmd partprobe "$TARGET_DISK" || { run_cmd echo "WARN: partprobe failed, but this might be okay."; }
        run_cmd echo "# Waiting for kernel to recognize new partitions..."
        run_cmd udevadm settle || { run_cmd echo "WARN: udevadm settle failed, continuing with a delay."; sleep 3; }

        local efi_part="${TARGET_DISK}1"
        local root_part="${TARGET_DISK}2"
        if [[ $TARGET_DISK == *"nvme"* ]]; then
            efi_part="${TARGET_DISK}p1"
            root_part="${TARGET_DISK}p2"
        fi

        run_cmd echo "# Verifying partitions at $efi_part and $root_part"
        if ! [ -b "$efi_part" ] || ! [ -b "$root_part" ]; then
            run_cmd echo "# FATAL: Could not find partitions after running fdisk. Check logs."
            return 1
        fi

        run_cmd wipefs -a "$efi_part" || { run_cmd echo "FATAL: Failed to wipe EFI partition."; return 1; }
        run_cmd wipefs -a "$root_part" || { run_cmd echo "FATAL: Failed to wipe root partition."; return 1; }

        run_cmd mkfs.fat -F32 "$efi_part" || { run_cmd echo "FATAL: mkfs.fat failed on EFI partition."; return 1; }
        run_cmd mkfs.ext4 -F -q "$root_part" || { run_cmd echo "FATAL: mkfs.ext4 failed on root partition."; return 1; }

        run_cmd mount "$root_part" /mnt || { run_cmd echo "FATAL: Failed to mount root partition $root_part."; return 1; }
        run_cmd mkdir -p /mnt/boot || { run_cmd echo "FATAL: Failed to create /mnt/boot directory."; return 1; }
        run_cmd mount "$efi_part" /mnt/boot || { run_cmd echo "FATAL: Failed to mount EFI partition $efi_part."; return 1; }
    fi
    return 0
}

install_base_system() {
    echo "# --- Installing Arch Linux Base System ---" >> "$LOG_FILE"
    # Create a temporary pacman.conf
    run_cmd echo "# Creating temporary pacman.conf"
    cat > /tmp/pacman.conf <<EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional

[acreetionOSREPO]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch

[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch

[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
EOF

    local pkgs_to_install=(
        "base" 
        "$KERNEL_PACKAGE" 
        "linux-firmware" 
        "$KERNEL_HEADERS_PACKAGE"
        "mkinitcpio"
        "sudo" 
        "nano"
        "networkmanager" 
        "git" 
        "vim" 
        "efibootmgr"
    )

    [ "$DUAL_BOOT_MODE" = true ] && pkgs_to_install+=("os-prober")
    pkgs_to_install+=("${PACSTRAP_EXTRA_PKGS[@]}")

    stdbuf -oL -eL pacstrap -C /tmp/pacman.conf -K /mnt "${pkgs_to_install[@]}" 2>&1 | tee -a "$LOG_FILE" | dialog --backtitle "AcreetionOS Installer" --title "Installing Base System" --programbox 30 100
    local exit_code=${PIPESTATUS[0]}
    rm /tmp/pacman.conf
    clear
    return $exit_code
}

configure_chroot() {
    run_cmd echo "# --- Preparing Chroot Configuration Script ---"
    local chroot_pkgs_string="${CHROOT_EXTRA_PKGS[*]}"
    cat > /mnt/setup_chroot.sh <<'EOF'
#!/bin/bash
set -e
DUAL_BOOT_MODE=$1; HOSTNAME=$2; USERNAME=$3; USER_PASSWORD=$4; shift 4; CHROOT_PKGS_STRING="$@"
echo "--- Configuring base system (timezone, locale, time) ---"
ln -sf /usr/share/zoneinfo/UTC /etc/localtime; hwclock --systohc
sed -i 's/^#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen; locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "${HOSTNAME}" > /etc/hostname
cat > /etc/hosts <<HOSTS_EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   ${HOSTNAME}.localdomain ${HOSTNAME}
HOSTS_EOF
echo "--- Creating final system pacman.conf ---"
cat > /etc/pacman.conf <<PACMAN_EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional

[acreetionOSREPO]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch

[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch

[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
PACMAN_EOF

echo "--- Synchronizing new repository databases ---"; pacman -Sy
echo "--- Setting up user accounts and sudo ---"
passwd -l root
useradd -m -G wheel -s /bin/bash "${USERNAME}"; echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
echo "--- Branding system as AcreetionOS ---"
sed -i 's/NAME="Arch Linux"/NAME="AcreetionOS"/' /etc/os-release
sed -i 's/PRETTY_NAME="Arch Linux"/PRETTY_NAME="AcreetionOS"/' /etc/os-release
sed -i 's/ID=arch/ID=acreetionos/' /etc/os-release
echo "--- Installing core desktop environment and software ---"
CORE_PKGS="cinnamon lightdm lightdm-gtk-greeter calamares-config gnome-terminal firefox webapp-manager bluez bluez-utils blueman cups cups-pdf ghostscript gsfonts hplip gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mint-themes mint-x-icons mint-y-icons fastfetch"
pacman -S --noconfirm --needed ${CORE_PKGS}
echo "--- Installing user-selected optional packages ---"
if [ -n "$CHROOT_PKGS_STRING" ]; then
    echo "Installing repository packages: $CHROOT_PKGS_STRING"
    pacman -S --noconfirm --needed $CHROOT_PKGS_STRING
fi
echo "--- Re-generating initramfs to prevent kernel panic ---"
mkinitcpio -P

# --- Install systemd-boot ---
echo "--- Installing systemd-boot bootloader ---"
bootctl --path=/boot install

# Ensure the loader directory exists
mkdir -p /mnt/boot/loader

# Create loader.conf
cat > /mnt/boot/loader/loader.conf <<'EOF'
default arch
timeout 4
console-mode max
editor 0
EOF

# Create boot entry
mkdir -p /mnt/boot/loader/entries
cat > /mnt/boot/loader/entries/arch.conf <<'EOF'
title   Arch Linux
linux   /vmlinuz-linux
initrd  /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/disk/by-label/AcrionRoot) rw
EOF

# Note: Adjust the root= as needed for your setup.

# --- Enable system services ---
systemctl enable lightdm.service
systemctl enable NetworkManager.service
systemctl enable cups.service
systemctl enable bluetooth.service
if [ -f /usr/lib/systemd/system/timeshift-autosnap.service ]; then
    systemctl enable timeshift-autosnap.service
fi
echo "--- Enabling VM Guest Services if installed ---"
if [ -f /usr/lib/systemd/system/vboxservice.service ]; then
    systemctl enable vboxservice.service
fi
if [ -f /usr/lib/systemd/system/vmtoolsd.service ]; then
    systemctl enable vmtoolsd.service
fi
if [ -f /usr/lib/systemd/system/qemu-guest-agent.service ]; then
    systemctl enable qemu-guest-agent.service
fi
if [ -f /usr/lib/systemd/system/spice-vdagentd.service ]; then
    systemctl enable spice-vdagentd.service
fi
EOF
    chmod +x /mnt/setup_chroot.sh
    run_cmd echo "# --- Executing Chroot Script ---"
    arch-chroot /mnt /setup_chroot.sh "$@"
    rm /mnt/setup_chroot.sh
    clear
}
# End of the chroot script here. This is a big block of code, so it's embedded in your script.

# --- Main functions like run_full_installation, tui_review_and_install, tui_post_install_menu, main() ---
# (Your existing code remains unchanged, just replace the configure_chroot() function with this fixed version)

# --- Main ---
main() {
    if ! command -v dialog &> /dev/null; then echo "Error: dialog required"; exit 1; fi
    > "$LOG_FILE"

    tui_welcome
    tui_virtualization_check

    while true; do
        # Main menu code (your existing menu code)
        # ...
        # When user chooses to "Review and Install" and confirms, call run_full_installation
        # which calls configure_chroot internally
        # ...
    done
}

main "$@"
