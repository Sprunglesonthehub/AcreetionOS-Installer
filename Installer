#!/bin/bash

<<<<<<< HEAD
# ===================== ArchWiki Install Script =====================
# Version: 30.0
# WARNING: Use with caution! This will wipe your disk!
=======
# ##################################################################
#  AcreetionOS Arch Linux Installation Script
#
#  Author: AI Assistant
#  Version: 26.0 (VM Guest Support)
#
#  !!! DANGER !!!
#  This is a LIVE installer and will make PERMANENT, DESTRUCTIVE
#  changes to your system's storage. It is NOT a simulation.
#  USE WITH EXTREME CAUTION. Back up all data before proceeding.
# ##################################################################
>>>>>>> parent of 528910b (Changed to fdisk)

LOG_FILE="arch_install.log"

# Style
C_ERASE="\Zb\Z1ERASE\Zn"
C_DANGER_BG="--colors --backtitle \Zb\Z1DANGER\Zn"

# Global State
NETWORK_CONFIGURED=false
DISK_CONFIGURED=false
USER_CONFIGURED=false
INSTALLATION_DONE=false
VM_TYPE="None"

TARGET_DISK=""
ARCH_PART_SIZE="50"
HOSTNAME="archlinux"
USERNAME="user"
USER_PASSWORD="password"
DUAL_BOOT=false

PACSTRAP_EXTRA_PKGS=()
CHROOT_EXTRA_PKGS=()
KERNEL_PACKAGE="linux"
KERNEL_HEADERS_PACKAGE="linux-headers"

# --- Utility functions ---
run_cmd() {
    stdbuf -oL -eL "$@" >> "$LOG_FILE" 2>&1
    return ${PIPESTATUS[0]}
}
add_pkg() {
    local arr_name="$1"
    local pkg="$2"
    eval "local arr=(\"\${${arr_name}[@]}\")"
    for p in "${arr[@]}"; do
        [ "$p" == "$pkg" ] && return
    done
    eval "${arr_name}+=(\"$pkg\")"
}

# --- UI functions ---
tui_welcome() {
    dialog --backtitle "ArchLinux Installation" --title "Welcome" --msgbox \
        "Welcome! This script will install Arch Linux.\n\nIt will wipe your disk.\nBack up data!" 10 70
}
tui_virtualization() {
    dialog --backtitle "ArchLinux Installation" --title "VM Detection" --yesno \
        "Is this inside a Virtual Machine?" 8 70
    if [ $? -eq 0 ]; then
        VM_TYPE=$(dialog --backtitle "ArchLinux Installation" --title "Select VM" --radiolist \
            "Choose your VM" 15 70 4 \
            "VirtualBox" "Oracle VirtualBox" "on" \
            "QEMU" "QEMU/KVM" "off" \
            "VMware" "VMware" "off" \
            "Hyper-V" "Hyper-V" "off" 2>&1 >/dev/tty)
        case "$VM_TYPE" in
            "VirtualBox") add_pkg CHROOT_EXTRA_PKGS "virtualbox-guest-utils" ;;
            "QEMU") add_pkg CHROOT_EXTRA_PKGS "qemu-guest-agent" "spice-vdagent" ;;
            "VMware") add_pkg CHROOT_EXTRA_PKGS "open-vm-tools" ;;
            "Hyper-V") add_pkg CHROOT_EXTRA_PKGS "hyperv" ;;
            *) VM_TYPE="None" ;;
        esac
    fi
}
tui_network() {
    while true; do
        CHOICE=$(dialog --backtitle "ArchLinux Installation" --title "Network" --menu "Choose:" 15 55 3 \
            1 "Connect Wi-Fi" 2 "Use Wired" 3 "Continue" 2>&1 >/dev/tty)
        [ $? -ne 0 ] && return
        case "$CHOICE" in
            1)
                dialog --backtitle "ArchLinux Installation" --infobox "Scanning Wi-Fi..." 4 40
                sleep 1
                local networks=("AcreetionWiFi" "Strong" "CinnamonNet" "Medium" "Public WiFi" "Weak")
                WIFI_CHOICE=$(dialog --backtitle "ArchLinux Installation" --menu "Select Wi-Fi" 15 50 4 "${networks[@]}" 2>&1 >/dev/tty)
                [ $? -ne 0 ] && continue
                WIFI_PASS=$(dialog --backtitle "ArchLinux Installation" --passwordbox "Password for $WIFI_CHOICE" 8 40 2>&1 >/dev/tty)
                [ $? -ne 0 ] && continue
                # Assume success
                ping -c 1 archlinux.org >/dev/null 2>&1
                dialog --backtitle "ArchLinux Installation" --msgbox "Connected!" 6 30
                timedatectl set-ntp true >/dev/null 2>&1
                NETWORK_CONFIGURED=true
                return
                ;;
            2)
                ping -c 1 archlinux.org >/dev/null 2>&1
                dialog --backtitle "ArchLinux Installation" --msgbox "Connected!" 6 30
                timedatectl set-ntp true >/dev/null 2>&1
                NETWORK_CONFIGURED=true
                return
                ;;
            3) NETWORK_CONFIGURED=true; return ;;
        esac
    done
}
tui_disk() {
    # List disks
    local disks=()
    while read -r dev; do
        disks+=("$dev" "$(lsblk -dno SIZE,MODEL "$dev")")
    done < <(lsblk -dno NAME | sed 's/^/\/dev\//')

    local disk_choice
    disk_choice=$(dialog --backtitle "ArchLinux Installation" --title "Select Disk" --radiolist \
        "Available disks:" 20 70 10 \
        "${disks[@]}" 2>&1 >/dev/tty)
    [ $? -ne 0 ] && return
    TARGET_DISK="$disk_choice"

    # Detect Windows partition
    local win_part
    win_part=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | awk 'NR==1 {print $1}')

    # Decide mode
    local choice
    if [ -n "$win_part" ]; then
        choice=$(dialog --backtitle "ArchLinux Installation" --title "Windows detected" --menu \
            "Detected Windows NTFS partition.\nChoose:" 15 70 2 \
            1 "Dual boot (shrink Windows)" \
            2 "Erase Windows" 2>&1 >/dev/tty)
        [ $? -ne 0 ] && return
        if [ "$choice" = "1" ]; then
            DUAL_BOOT=true
            ARCH_PART_SIZE=$(dialog --backtitle "ArchLinux Installation" --title "Partition Size (GB)" --inputbox \
                "Enter size in GB for Arch root" 8 60 "$ARCH_PART_SIZE" 2>&1 >/dev/tty)
            [ $? -ne 0 ] && return
        else
            DUAL_BOOT=false
        fi
    else
        if dialog --backtitle "ArchLinux Installation" --title "No Windows" --yesno \
            "No Windows partition detected. Proceed to wipe entire disk?" 8 60; then
            DUAL_BOOT=false
        else
            return
        fi
    fi

    # Confirm wipe
    if dialog --backtitle "ArchLinux Installation" --title "Warning" --yesno \
        "This will erase all data on $TARGET_DISK. Proceed?" 8 60; then
        partition_and_format
        DISK_CONFIGURED=true
    else
        return
    fi
}
partition_and_format() {
    echo "Partitioning disk: $TARGET_DISK" >> "$LOG_FILE"
    # Unmount all
    umount -R /mnt 2>/dev/null || true
    umount ${TARGET_DISK}* 2>/dev/null || true

<<<<<<< HEAD
    # Wipe
    run_cmd wipefs -a "$TARGET_DISK"

    # Detect UEFI or BIOS
    if [ -d /sys/firmware/efi ]; then
        echo "UEFI detected, GPT." >> "$LOG_FILE"
        run_cmd parted --script "$TARGET_DISK" mklabel gpt
        # EFI partition 1G
        run_cmd parted --script "$TARGET_DISK" mkpart primary fat32 1MiB 1GiB
        run_cmd parted --script "$TARGET_DISK" set 1 esp on
        # Root partition remaining space
        run_cmd parted --script "$TARGET_DISK" mkpart primary ext4 1GiB 100%
        sleep 2
        if [[ "$TARGET_DISK" == *"nvme"* ]]; then
            EFI_PART="${TARGET_DISK}p1"
            ROOT_PART="${TARGET_DISK}p2"
        else
            EFI_PART="${TARGET_DISK}1"
            ROOT_PART="${TARGET_DISK}2"
        fi
        run_cmd mkfs.fat -F32 "$EFI_PART"
        run_cmd mkfs.ext4 -F "$ROOT_PART"
        run_cmd mount "$ROOT_PART" /mnt
        mkdir -p /mnt/boot
        run_cmd mount "$EFI_PART" /mnt/boot
    else
        echo "BIOS detected, MBR." >> "$LOG_FILE"
        run_cmd parted --script "$TARGET_DISK" mklabel msdos
        # Single root partition
        run_cmd parted --script "$TARGET_DISK" mkpart primary ext4 1MiB 100%
        sleep 2
        if [[ "$TARGET_DISK" == *"nvme"* ]]; then
            ROOT_PART="${TARGET_DISK}p1"
        else
            ROOT_PART="${TARGET_DISK}1"
        fi
        run_cmd mkfs.ext4 -F "$ROOT_PART"
        run_cmd mount "$ROOT_PART" /mnt
=======
    if [ "$DUAL_BOOT_MODE" = true ]; then
        run_cmd "# Dual Boot Mode Enabled"
        local efi_part; efi_part=$(lsblk -plno NAME,PARTLABEL,FSTYPE "$TARGET_DISK" | grep -i "fat32.*efi" | awk '{print $1}')
        local win_part; win_part=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | sort -k1 | tail -n1 | awk '{print $1}')
        run_cmd "# Found EFI partition to reuse: $efi_part"; run_cmd "# Found Windows partition to shrink: $win_part"
        run_cmd "ntfsresize --size -${ARCH_PART_SIZE}G $win_part"
        run_cmd "# Creating new partition for AcreetionOS with label AOS_ROOT..."; run_cmd "sgdisk --largest-new=0 --change-name=0:'AOS_ROOT' --typecode=0:8300 $TARGET_DISK"
        run_cmd "partprobe $TARGET_DISK"
        local arch_root_part="/dev/disk/by-partlabel/AOS_ROOT"
        run_cmd "# Verifying new partition at $arch_root_part"
        if ! [ -b "$arch_root_part" ]; then run_cmd "# FATAL: Could not find partition by label 'AOS_ROOT' after creation."; return 1; fi
        run_cmd "mkfs.ext4 -F $arch_root_part"; run_cmd "mount $arch_root_part /mnt"; run_cmd "mkdir -p /mnt/boot"; run_cmd "mount $efi_part /mnt/boot"
    else
        run_cmd "# Overwrite Mode Enabled"
        local efi_label="AOS_EFI"; local root_label="AOS_ROOT"
        run_cmd "sgdisk --zap-all $TARGET_DISK"
        run_cmd "sgdisk --new=1:0:+512M --typecode=1:ef00 --change-name=1:'$efi_label' $TARGET_DISK"
        run_cmd "sgdisk --new=2:0:0 --typecode=2:8300 --change-name=2:'$root_label' $TARGET_DISK"
        run_cmd "partprobe $TARGET_DISK"; sleep 2
        local efi_part="/dev/disk/by-partlabel/$efi_label"; local root_part="/dev/disk/by-partlabel/$root_label"
        run_cmd "# Verifying partitions at $efi_part and $root_part"
        if ! [ -b "$efi_part" ] || ! [ -b "$root_part" ]; then run_cmd "# FATAL: Could not find partitions by label after creation. Check logs."; return 1; fi
        run_cmd "mkfs.fat -F32 $efi_part"; run_cmd "mkfs.ext4 -F $root_part"; run_cmd "mount $root_part /mnt"; run_cmd "mkdir -p /mnt/boot"; run_cmd "mount $efi_part /mnt/boot"
>>>>>>> parent of 528910b (Changed to fdisk)
    fi
}
install_base() {
    # Create pacman config
    cat > /tmp/pacman.conf <<EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional

[custom-repo]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch
EOF
    local pkgs=("base" "$KERNEL_PACKAGE" "linux-firmware" "$KERNEL_HEADERS_PACKAGE" "mkinitcpio" "sudo" "nano" "networkmanager" "git" "vim" "efibootmgr")
    [ "$DUAL_BOOT" = true ] && pkgs+=("os-prober")
    pkgs+=("${PACSTRAP_EXTRA_PKGS[@]}")

    stdbuf -oL -eL pacstrap -C /tmp/pacman.conf -K /mnt "${pkgs[@]}" | tee -a "$LOG_FILE"
    rm /tmp/pacman.conf
}
configure_chroot() {
    cat > /mnt/setup_chroot.sh <<'EOF'
#!/bin/bash
set -e
# Install systemd-boot
bootctl --path=/boot install

<<<<<<< HEAD
# Create loader directory
mkdir -p /boot/loader/entries

# Create loader.conf
cat > /boot/loader/loader.conf <<'EOF2'
default arch
timeout 4
console-mode max
editor 0
EOF2

# Create boot entry
cat > /boot/loader/entries/arch.conf <<'EOF2'
title   Arch Linux
linux   /vmlinuz-linux
initrd  /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/disk/by-label/ArchRoot) rw
EOF2

# Additional user/system setup can be added here
=======
#[acreetionOSREPO]
#SigLevel = Optional
#Server = https://darrengames.ddns.net:1500/repo/\$arch
[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch
[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
PACMAN_EOF
echo "--- Synchronizing new repository databases ---"; pacman -Sy
echo "--- Setting up user accounts and sudo ---"
passwd -l root
useradd -m -G wheel -s /bin/bash "${USERNAME}"; echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers
echo "--- Installing and configuring GRUB bootloader ---"
if [ "${DUAL_BOOT_MODE}" = true ]; then sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub; fi
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=AcreetionOS
grub-mkconfig -o /boot/grub/grub.cfg
echo "--- Installing core desktop environment and software ---"
CORE_PKGS="cinnamon gdm gnome-terminal firefox webapp-manager wireguard-tools bluez bluez-utils blueman cups cups-pdf ghostscript gsfonts hplip gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mint-themes mint-x-icons mint-y-icons fastfetch"
pacman -S --noconfirm --needed ${CORE_PKGS}
echo "--- Installing user-selected optional packages ---"
if [ -n "$CHROOT_PKGS_STRING" ]; then
    REPO_PKGS=(); AUR_PKGS=()
    for pkg in $CHROOT_PKGS_STRING; do if pacman -Si "$pkg" &> /dev/null; then REPO_PKGS+=("$pkg"); else AUR_PKGS+=("$pkg"); fi; done
    if [ ${#REPO_PKGS[@]} -gt 0 ]; then echo "Installing repository packages: ${REPO_PKGS[*]}"; pacman -S --noconfirm --needed "${REPO_PKGS[@]}"; fi
    if [ ${#AUR_PKGS[@]} -gt 0 ]; then echo "Installing AUR packages: ${AUR_PKGS[*]}"; if command -v yay &> /dev/null; then su - "${USERNAME}" -c "yay -S --noconfirm ${AUR_PKGS[*]}"; else echo "WARNING: 'yay' not found for AUR packages."; fi; fi
fi
echo "--- Enabling essential system services ---"
systemctl enable gdm.service; systemctl enable NetworkManager.service
systemctl enable cups.service; systemctl enable bluetooth.service
if [ -f /usr/lib/systemd/system/timeshift-autosnap.service ]; then systemctl enable timeshift-autosnap.service; fi
echo "--- Enabling VM Guest Services if installed ---"
if [ -f /usr/lib/systemd/system/vboxservice.service ]; then systemctl enable vboxservice.service; fi
if [ -f /usr/lib/systemd/system/vmtoolsd.service ]; then systemctl enable vmtoolsd.service; fi
if [ -f /usr/lib/systemd/system/qemu-guest-agent.service ]; then systemctl enable qemu-guest-agent.service; fi
if [ -f /usr/lib/systemd/system/spice-vdagentd.service ]; then systemctl enable spice-vdagentd.service; fi
# Hyper-V daemons are enabled by default through presets, no need to manually enable.
echo "--- Chroot configuration complete ---"
>>>>>>> parent of 528910b (Changed to fdisk)
EOF
    chmod +x /mnt/setup_chroot.sh
    arch-chroot /mnt /setup_chroot.sh
    rm /mnt/setup_chroot.sh
}
run_install() {
    partition_and_format
    install_base
    genfstab -U /mnt >> /mnt/etc/fstab
    configure_chroot
=======
    run_cmd echo "# --- Executing Chroot Configuration ---"
    
    # Run chroot process in background
    stdbuf -oL -eL arch-chroot /mnt /setup_chroot.sh \
        "$DUAL_BOOT_MODE" "$HOSTNAME" "$USERNAME" "$USER_PASSWORD" "$chroot_pkgs_string" >> "$LOG_FILE" 2>&1 &
    local chroot_pid=$!

    # Display a gauge box with a simple message
    (
        echo "XXX"
        echo "Installing AcreetionOS unique packages, please be patient."
        echo "This may take several minutes."
        echo "XXX"
        # Keep the gauge up while the background process runs
        while ps -p $chroot_pid >/dev/null; do
            sleep 1
        done
    ) | dialog --backtitle "AcreetionOS Installer" --title "Final Configuration" --gauge "" 10 70 0
        
    wait $chroot_pid
    local exit_code=$?
    
    run_cmd rm /mnt/setup_chroot.sh
    # Clear the screen after the gauge box to prevent artifacts
    clear
    return $exit_code
}

run_full_installation() {
    ( echo 10; echo "### Partitioning and formatting disk... ###" ) | dialog --backtitle "AcreetionOS Installer" --title "Installation Step 1/4" --gauge "Please wait..." 10 70 0
    partition_and_format; [ $? -ne 0 ] && return 1

    dialog --backtitle "AcreetionOS Installer" --title "Installation Step 2/4" --infobox "Starting base system installation (pacstrap)...\n\nThis will show the live package installation from pacstrap." 8 70
    sleep 2
    install_base_system; [ $? -ne 0 ] && return 1
    
    ( echo 30; echo "### Generating fstab... ###" ) | dialog --backtitle "AcreetionOS Installer" --title "Installation Step 3/4" --gauge "Please wait..." 10 70 0
    run_cmd genfstab -U /mnt >> /mnt/etc/fstab; [ $? -ne 0 ] && return 1

    # Run the final configuration. The user-facing dialog is now inside this function.
    configure_chroot; [ $? -ne 0 ] && return 1

    return 0
}
# =================== Main ===================
main() {
    if ! command -v dialog &> /dev/null; then echo "Please install dialog"; exit 1; fi
    > "$LOG_FILE"
    tui_welcome
    tui_virtualization
    tui_network
    tui_disk
    if [ "$DISK_CONFIGURED" != "true" ]; then
        echo "Disk not configured, exiting."
        exit 1
    fi
    if dialog --backtitle "ArchLinux Installer" --title "Ready to install" --yesno "Proceed with installation?" 8 60; then
        run_install
        dialog --backtitle "ArchLinux Installer" --msgbox "Installation complete! Reboot now." 8 50
    fi
}
main "$@"
