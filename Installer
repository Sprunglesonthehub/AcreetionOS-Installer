#!/bin/bash

# =================== AcreetionOS Installer ===================
# Version: 30.0
# Note: Use with caution. Make sure to backup data.

LOG_FILE="acreetionos-install.log"

# Style
C_ERASE="\Zb\Z1ERASE\Zn"
C_DANGER_BG="--colors --backtitle \Zb\Z1DANGER\Zn"

# Global variables
NETWORK_CONFIGURED=false
DISK_CONFIGURED=false
USER_CONFIGURED=false
CUSTOM_CONFIGURED=false
INSTALLATION_COMPLETE=false
VM_TYPE="None"

TARGET_DISK=""
ARCH_PART_SIZE="50"
HOSTNAME=""
USERNAME=""
USER_PASSWORD=""
DUAL_BOOT_MODE=false

PACSTRAP_EXTRA_PKGS=()
CHROOT_EXTRA_PKGS=()
KERNEL_PACKAGE="linux"
KERNEL_HEADERS_PACKAGE="linux-headers"

# --- Utility ---
run_cmd() {
    stdbuf -oL -eL "$@" >> "$LOG_FILE" 2>&1
    return $?
}
add_pkg() {
    local arr_name="$1"
    local pkg="$2"
    eval "local arr=(\"\${${arr_name}[@]}\")"
    for p in "${arr[@]}"; do
        [ "$p" == "$pkg" ] && return
    done
    eval "${arr_name}+=(\"$pkg\")"
}

# =================== UI Functions ===================
tui_welcome() {
    dialog --backtitle "AcreetionOS Installer" --title "Welcome & Warning" --msgbox \
        "Welcome to the AcreetionOS Installer.\n\nThis script will make permanent changes to your disk.\nUse with caution.\n\nBack up all data." 14 70
}
tui_virtualization_check() {
    dialog --backtitle "AcreetionOS Installer" --title "Virtualization Check" --yesno \
        "Is this inside a Virtual Machine?" 8 70
    if [ $? -eq 0 ]; then
        VM_TYPE=$(dialog --backtitle "AcreetionOS Installer" --title "Select VM" --radiolist \
            "Choose your VM platform" 15 70 4 \
            "VirtualBox" "Oracle VirtualBox" "on" \
            "QEMU" "QEMU/KVM" "off" \
            "VMware" "VMware" "off" \
            "Hyper-V" "Hyper-V" "off" 2>&1 >/dev/tty)
        case "$VM_TYPE" in
            "VirtualBox") add_pkg CHROOT_EXTRA_PKGS "virtualbox-guest-utils" ;;
            "QEMU") add_pkg CHROOT_EXTRA_PKGS "qemu-guest-agent" "spice-vdagent" ;;
            "VMware") add_pkg CHROOT_EXTRA_PKGS "open-vm-tools" ;;
            "Hyper-V") add_pkg CHROOT_EXTRA_PKGS "hyperv" ;;
            *) VM_TYPE="None" ;;
        esac
    fi
}
tui_network() {
    while true; do
        CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Network" --menu "Select option:" 15 55 3 \
            1 "Connect to Wi-Fi" 2 "Use Wired" 3 "Continue" 2>&1 >/dev/tty)
        [ $? -ne 0 ] && return
        case "$CHOICE" in
            1)
                dialog --backtitle "AcreetionOS Installer" --infobox "Scanning Wi-Fi..." 4 40
                sleep 1
                local networks=("AcreetionWiFi" "Strong" "CinnamonNet" "Medium" "Public WiFi" "Weak")
                WIFI_CHOICE=$(dialog --backtitle "AcreetionOS Installer" --menu "Select Wi-Fi:" 15 50 4 "${networks[@]}" 2>&1 >/dev/tty)
                [ $? -ne 0 ] && continue
                WIFI_PASS=$(dialog --backtitle "AcreetionOS Installer" --passwordbox "Enter password for $WIFI_CHOICE:" 8 40 2>&1 >/dev/tty)
                [ $? -ne 0 ] && continue
                dialog --backtitle "AcreetionOS Installer" --infobox "Connecting..." 4 40
                ping -c 1 archlinux.org >/dev/null 2>&1
                dialog --backtitle "AcreetionOS Installer" --msgbox "Connected!" 6 30
                timedatectl set-ntp true >/dev/null 2>&1
                NETWORK_CONFIGURED=true
                return
                ;;
            2)
                dialog --backtitle "AcreetionOS Installer" --infobox "Checking connection..." 4 40
                ping -c 1 archlinux.org >/dev/null 2>&1
                dialog --backtitle "AcreetionOS Installer" --msgbox "Connected!" 6 30
                timedatectl set-ntp true >/dev/null 2>&1
                NETWORK_CONFIGURED=true
                return
                ;;
            3)
                NETWORK_CONFIGURED=true
                return
                ;;
        esac
    done
}
tui_windows_backup() {
    mapfile -t usb_devices < <(lsblk -dno NAME,RM | awk '$2==1 {print "/dev/"$1}')
    if [ ${#usb_devices[@]} -eq 0 ]; then
        dialog --backtitle "AcreetionOS Installer" --msgbox "No USB drives." 8 50
        return 1
    fi
    local -a options=()
    for dev in "${usb_devices[@]}"; do
        options+=("$dev" "$(lsblk -dno SIZE,MODEL "$dev")")
    done
    local usb
    usb=$(dialog --backtitle "AcreetionOS Installer" --menu "Select USB:" 20 70 5 "${options[@]}" 2>&1 >/dev/tty)
    [ $? -ne 0 ] && return
    dialog --backtitle "AcreetionOS Installer" --yesno "All data on $usb will be destroyed. Proceed?" 8 60
    [ $? -ne 0 ] && return
    local winpart
    winpart=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | awk 'NR==1 {print $1}')
    ( echo 10; mkfs.ext4 -F "$usb" >/dev/null; sleep 2; echo 25; mkdir -p /mnt/backup; mount "$usb" /mnt/backup; sleep 2; echo 50; ntfsclone --save-image -o - "$winpart" | gzip -c > /mnt/backup/windows_backup.img.gz; sleep 1; echo 90; umount /mnt/backup; echo 100; ) | dialog --backtitle "AcreetionOS Installer" --gauge "Backup in progress" 10 70 0
    dialog --backtitle "AcreetionOS Installer" --msgbox "Backup complete." 8 50
}
# ... (more TUIs as needed)

# =================== Disk Partitioning ===================
partition_and_format() {
    run_cmd echo "# Partitioning..."
    umount -R /mnt 2>/dev/null || true
    umount ${TARGET_DISK}* 2>/dev/null || true

    if [ "$DUAL_BOOT_MODE" = true ]; then
        # Dual boot logic (not shown for brevity)
        # Implement your dual boot partitioning here
        :
    else
        # Overwrite mode
        run_cmd wipefs -a "$TARGET_DISK"
        fdisk "$TARGET_DISK" <<EOF
g
n
1

+512M
t
1
n
2


w
EOF
        run_cmd partprobe "$TARGET_DISK"
        sleep 3
        # Identify partitions
        if [[ "$TARGET_DISK" == *"nvme"* ]]; then
            EFI_PART="${TARGET_DISK}p1"
            ROOT_PART="${TARGET_DISK}p2"
        else
            EFI_PART="${TARGET_DISK}1"
            ROOT_PART="${TARGET_DISK}2"
        fi
        run_cmd wipefs -a "$EFI_PART"
        run_cmd wipefs -a "$ROOT_PART"
        run_cmd mkfs.fat -F32 "$EFI_PART"
        run_cmd mkfs.ext4 -F "$ROOT_PART"
        run_cmd mount "$ROOT_PART" /mnt
        mkdir -p /mnt/boot
        mount "$EFI_PART" /mnt/boot
    fi
}

# =================== Install Base System ===================
install_base_system() {
    # Create temporary pacman.conf
    cat > /tmp/pacman.conf <<EOF
[options]
Architecture = auto
SigLevel = Never
LocalFileSigLevel = Optional

[acreetionOSREPO]
SigLevel = Optional
Server = https://darrengames.ddns.net:1500/repo/\$arch

[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch

[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
EOF
    local pkgs=("base" "$KERNEL_PACKAGE" "linux-firmware" "$KERNEL_HEADERS_PACKAGE" "mkinitcpio" "sudo" "nano" "networkmanager" "git" "vim" "efibootmgr")
    [ "$DUAL_BOOT_MODE" = true ] && pkgs+=("os-prober")
    pkgs+=("${PACSTRAP_EXTRA_PKGS[@]}")
    stdbuf -oL -eL pacstrap -C /tmp/pacman.conf -K /mnt "${pkgs[@]}" | tee -a "$LOG_FILE"
    rm /tmp/pacman.conf
}

# =================== Chroot Configuration ===================
configure_chroot() {
    cat > /mnt/setup_chroot.sh <<'EOF'
#!/bin/bash
set -e

# Install systemd-boot
bootctl --path=/boot install

# Ensure loader directory exists
mkdir -p /boot/loader/entries

# Create loader.conf
cat > /boot/loader/loader.conf <<'EOF2'
default arch
timeout 4
console-mode max
editor 0
EOF2

# Create boot entry
cat > /boot/loader/entries/arch.conf <<'EOF2'
title   Arch Linux
linux   /vmlinuz-linux
initrd  /initramfs-linux.img
options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/disk/by-label/AcrionRoot) rw
EOF2

# Additional setup: locales, users, services...
# Place your existing setup commands here

EOF

    chmod +x /mnt/setup_chroot.sh
    arch-chroot /mnt /setup_chroot.sh "$@"
    rm /mnt/setup_chroot.sh
}

# =================== Main Full Install ===================
run_full_installation() {
    partition_and_format
    install_base_system
    genfstab -U /mnt >> /mnt/etc/fstab
    configure_chroot
    # Additional steps...
}

# =================== Main Menu ===================
main() {
    if ! command -v dialog &> /dev/null; then echo "dialog required"; exit 1; fi
    > "$LOG_FILE"
    tui_welcome
    tui_virtualization_check

    while true; do
        CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Main Menu" --cancel-label "Exit" --menu "Select an option:" 15 70 6 \
            1 "Configure Network" \
            2 "Configure Disk" \
            3 "Setup User & Hostname" \
            4 "Optional: Software & Customization" \
            5 "Review & Install" \
            6 "Quit" 2>&1 >/dev/tty)
        [ $? -ne 0 ] && break

        case "$CHOICE" in
            1) tui_network ;;
            2) tui_disk ;;  # Call your fixed disk setup
            3) tui_user ;;
            4) tui_customization_menu ;;
            5)
                if [ "$INSTALLATION_COMPLETE" = true ]; then
                    dialog --backtitle "AcreetionOS Installer" --msgbox "Already complete." 8 50
                elif ! $NETWORK_CONFIGURED || ! $DISK_CONFIGURED || ! $USER_CONFIGURED; then
                    dialog --backtitle "AcreetionOS Installer" --msgbox "Complete all steps first." 8 50
                else
                    if tui_review_and_install; then
                        if dialog --backtitle "AcreetionOS Installer" --title "Warning" --yesno "Proceed? This will erase disk." 10 70; then
                            clear
                            run_full_installation
                            INSTALLATION_COMPLETE=true
                            dialog --backtitle "AcreetionOS Installer" --msgbox "Installation finished." 8 50
                        fi
                    fi
                fi
                ;;
            6) break ;;
        esac
    done
}

main "$@"
