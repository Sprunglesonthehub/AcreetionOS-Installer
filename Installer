#!/bin/bash

# Arch Linux CLI Installer with Profiles
# Author: A helpful AI
#
# -----------------------------------------------------------------------------
# |  WARNING: THIS SCRIPT IS DESTRUCTIVE AND WILL ERASE ALL DATA ON THE       |
# |  SELECTED DISK. USE AT YOUR OWN RISK. IT IS DESIGNED FOR UEFI SYSTEMS.    |
# -----------------------------------------------------------------------------

set -e # Exit immediately if a command exits with a non-zero status.

# --- Helper Functions for Colors and Logging ---
info() {
    echo -e "\e[34m[INFO]\e[0m $1"
}

success() {
    echo -e "\e[32m[SUCCESS]\e[0m $1"
}

warning() {
    echo -e "\e[33m[WARNING]\e[0m $1"
}

error() {
    echo -e "\e[31m[ERROR]\e[0m $1"
    exit 1
}

# --- Main Functions ---

check_prerequisites() {
    info "Checking prerequisites..."
    if ! ping -c 1 archlinux.org &> /dev/null; then
        error "No internet connection. Please connect to the internet first."
    fi

    if [ ! -d /sys/firmware/efi/efivars ]; then
        error "Not booted in UEFI mode. This script only supports UEFI."
    fi
    success "Prerequisites met."
}

get_user_input() {
    info "Gathering system information..."

    # Disk Selection
    lsblk -dno NAME,SIZE,MODEL
    read -p "Enter the disk to install Arch on (e.g., sda, nvme0n1): " DISK
    TARGET_DISK="/dev/${DISK}"
    if [ ! -b "$TARGET_DISK" ]; then
        error "Disk ${TARGET_DISK} does not exist."
    fi
    read -p "THIS WILL WIPE ${TARGET_DISK}. Are you absolutely sure? (yes/no): " CONFIRM
    if [ "$CONFIRM" != "yes" ]; then
        error "Installation aborted by user."
    fi

    # Hostname
    read -p "Enter hostname: " HOSTNAME

    # User credentials
    read -p "Enter username for the new user: " USERNAME
    while true; do
        read -s -p "Enter password for ${USERNAME}: " PASSWORD
        echo
        read -s -p "Confirm password: " PASSWORD_CONFIRM
        echo
        [ "$PASSWORD" = "$PASSWORD_CONFIRM" ] && break
        echo "Passwords do not match. Please try again."
    done

    # Root password
    while true; do
        read -s -p "Enter password for root: " ROOT_PASSWORD
        echo
        read -s -p "Confirm root password: " ROOT_PASSWORD_CONFIRM
        echo
        [ "$ROOT_PASSWORD" = "$ROOT_PASSWORD_CONFIRM" ] && break
        echo "Root passwords do not match. Please try again."
    done

    # Profile Selection
    info "Select an installation profile:"
    echo "1) Minimal (CLI only)"
    echo "2) GNOME Desktop"
    echo "3) KDE Plasma Desktop"
    echo "4) Sway (Tiling WM)"
    read -p "Enter profile number [1-4]: " PROFILE_CHOICE

    case $PROFILE_CHOICE in
        1) PROFILE_PACKAGES=""; DISPLAY_MANAGER="";;
        2) PROFILE_PACKAGES="gnome gnome-tweaks"; DISPLAY_MANAGER="gdm";;
        3) PROFILE_PACKAGES="plasma-meta kde-applications"; DISPLAY_MANAGER="sddm";;
        4) PROFILE_PACKAGES="sway waybar wofi foot"; DISPLAY_MANAGER="";; # Sway doesn't use a traditional DM
        *) error "Invalid profile selected.";;
    esac
}

partition_and_format() {
    info "Partitioning and formatting ${TARGET_DISK}..."

    # Wipe disk
    sgdisk --zap-all ${TARGET_DISK}

    # Create partitions
    sgdisk -n 1:0:+512M -t 1:ef00 -c 1:efiboot ${TARGET_DISK} # EFI partition
    sgdisk -n 2:0:+2G -t 2:8200 -c 2:swap ${TARGET_DISK}     # Swap partition
    sgdisk -n 3:0:0 -t 3:8300 -c 3:root ${TARGET_DISK}       # Root partition

    # Handle device naming conventions (e.g., /dev/sda1 vs /dev/nvme0n1p1)
    if [[ ${DISK} == nvme* ]]; then
        EFI_PART="${TARGET_DISK}p1"
        SWAP_PART="${TARGET_DISK}p2"
        ROOT_PART="${TARGET_DISK}p3"
    else
        EFI_PART="${TARGET_DISK}1"
        SWAP_PART="${TARGET_DISK}2"
        ROOT_PART="${TARGET_DISK}3"
    fi
    
    # Wait for device nodes to be created
    sleep 2

    info "Formatting partitions..."
    mkfs.fat -F32 ${EFI_PART}
    mkswap ${SWAP_PART}
    mkfs.ext4 -F ${ROOT_PART}

    info "Mounting filesystems..."
    mount ${ROOT_PART} /mnt
    mount --mkdir ${EFI_PART} /mnt/boot
    swapon ${SWAP_PART}

    success "Disk partitioned and filesystems mounted."
}

install_base_system() {
    info "Installing base system and packages..."
    # Pacstrap
    pacstrap /mnt base linux linux-firmware base-devel \
                  networkmanager grub efibootmgr \
                  neovim git \
                  $PROFILE_PACKAGES

    # Generate fstab
    genfstab -U /mnt >> /mnt/etc/fstab
    success "Base system installed."
}

configure_chroot() {
    info "Configuring the installed system..."
    # Use a "here document" to send a block of commands to arch-chroot
    arch-chroot /mnt /bin/bash <<EOF
set -e
info() { echo -e "\e[34m[INFO]\e[0m \$1"; }
success() { echo -e "\e[32m[SUCCESS]\e[0m \$1"; }

info "Setting timezone and locale..."
ln -sf /usr/share/zoneinfo/UTC /etc/localtime
hwclock --systohc
sed -i '/en_US.UTF-8/s/^#//' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

info "Configuring network and hostname..."
echo "${HOSTNAME}" > /etc/hostname
cat > /etc/hosts <<HOSTS
127.0.0.1   localhost
::1         localhost
127.0.1.1   ${HOSTNAME}.localdomain ${HOSTNAME}
HOSTS

info "Setting passwords..."
echo "root:${ROOT_PASSWORD}" | chpasswd
useradd -m -G wheel -s /bin/bash ${USERNAME}
echo "${USERNAME}:${PASSWORD}" | chpasswd

info "Configuring sudoers..."
sed -i '/%wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers

info "Installing and configuring bootloader (GRUB)..."
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=ARCH
grub-mkconfig -o /boot/grub/grub.cfg

info "Enabling essential services..."
systemctl enable NetworkManager
if [ -n "${DISPLAY_MANAGER}" ]; then
    systemctl enable ${DISPLAY_MANAGER}
fi

success "System configuration complete."
EOF
}

finish_installation() {
    info "Unmounting filesystems..."
    umount -R /mnt
    success "Installation complete! You can now reboot the system."
    info "Run 'reboot' to restart into your new Arch Linux system."
}


# --- Script Execution ---
main() {
    check_prerequisites
    get_user_input
    partition_and_format
    install_base_system
    configure_chroot
    finish_installation
}

# Run the main function
main
