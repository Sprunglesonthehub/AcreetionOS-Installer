#!/bin/bash

# ##################################################################
#  AcreetionOS Arch Linux Installation Script - SIMULATION MODE
#
#  Author: AI Assistant
#  Version: 21.0 (Interactive, Repo & Reboot Fixes)
#
#  This version features an interactive progress bar. During installation,
#  press SPACE to view the live log file. It also properly configures
#  custom pacman repositories and provides a safe post-install menu.
#
#  It is a SIMULATION and will NOT make any changes to your system.
# ##################################################################

# --- Configuration ---
SIMULATION=true # Set to 'false' to run for real. USE WITH EXTREME CAUTION.
LOG_FILE="acreetionos-install.log"

# --- Dialog Color/Style Codes ---
C_ERASE="\Zb\Z1ERASE\Zn"

# --- Global State Variables ---
NETWORK_CONFIGURED=false
DISK_CONFIGURED=false
USER_CONFIGURED=false
CUSTOM_CONFIGURED=false
INSTALLATION_COMPLETE=false

# --- Global Configuration Variables ---
TARGET_DISK=""
ARCH_PART_SIZE="50"
HOSTNAME=""
USERNAME=""
USER_PASSWORD=""
DUAL_BOOT_MODE=false
INSTALL_MODE=""
# --- Package Selection Arrays ---
PACSTRAP_EXTRA_PKGS=()
CHROOT_EXTRA_PKGS=()
# --- Advanced Options ---
KERNEL_PACKAGE="linux"
KERNEL_HEADERS_PACKAGE="linux-headers"

# --- Helper Functions ---
run_cmd() {
    if [ "$SIMULATION" = true ]; then
        echo "[SIM] $@" >> "$LOG_FILE"
    else
        # Use stdbuf to ensure output is line-buffered for the log
        stdbuf -oL -eL "$@" >> "$LOG_FILE" 2>&1
    fi
}
add_pkg() { local pkg_array_name="$1"; local pkg_to_add="$2"; eval "local arr=(\"\${${pkg_array_name}[@]}\")"; for pkg in "${arr[@]}"; do if [ "$pkg" == "$pkg_to_add" ]; then return; fi; done; eval "${pkg_array_name}+=(\"$pkg_to_add\")"; }

# --- TUI Functions (Unchanged from previous version) ---
tui_welcome() { dialog --backtitle "AcreetionOS Installer" --title "Welcome" --msgbox "Welcome to the AcreetionOS Installer.\n\nThis script will guide you through installing Arch Linux with the AcreetionOS profile (Cinnamon DE).\n\nCurrently in SIMULATION mode. No changes will be made. Commands will be logged to '$LOG_FILE'." 14 70; }
tui_network() { while true; do CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Network Configuration" --cancel-label "Back" --menu "Select an option:" 15 55 3 1 "Connect to Wi-Fi" 2 "Use Wired Ethernet (or check status)" 3 "Continue (Already Connected)" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; case "$CHOICE" in 1) dialog --backtitle "AcreetionOS Installer" --infobox "Scanning for Wi-Fi networks..." 4 40; sleep 1; local networks=("AcreetionWiFi" "Strong" "CinnamonNet" "Medium" "Public WiFi" "Weak"); WIFI_CHOICE=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --menu "Choose a network:" 15 50 4 "${networks[@]}" 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; WIFI_PASS=$(dialog --backtitle "AcreetionOS Installer" --cancel-label "Back" --passwordbox "Enter password for $WIFI_CHOICE:" 8 40 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; dialog --backtitle "AcreetionOS Installer" --infobox "Connecting..." 4 40; run_cmd "ping -c 1 archlinux.org"; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; run_cmd "timedatectl set-ntp true"; NETWORK_CONFIGURED=true; return;; 2) dialog --backtitle "AcreetionOS Installer" --infobox "Checking connection..." 4 40; run_cmd "ping -c 1 archlinux.org"; dialog --backtitle "AcreetionOS Installer" --msgbox "Connection successful!" 6 30; run_cmd "timedatectl set-ntp true"; NETWORK_CONFIGURED=true; return;; 3) NETWORK_CONFIGURED=true; return;; esac; done; }
tui_windows_backup() { mapfile -t usb_devices < <(lsblk -dno NAME,RM | awk '$2==1 {print "/dev/"$1}'); if [ ${#usb_devices[@]} -eq 0 ]; then dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "No removable USB drives found. Cannot perform backup." 8 50; return 1; fi; local -a usb_options=(); for dev_path in "${usb_devices[@]}"; do usb_options+=("$dev_path" "$(lsblk -dno SIZE,MODEL "$dev_path")"); done; local backup_usb; backup_usb=$(dialog --backtitle "AcreetionOS Installer" --title "Select Backup USB Drive" --cancel-label "Cancel Backup" --radiolist "Select a USB drive to use for the backup:" 20 70 5 "${usb_options[@]}" "on" 2>&1 >/dev/tty); [ $? -ne 0 ] && return 1; dialog --backtitle "AcreetionOS Installer" --title "!!! WARNING !!!" --yesno "ALL DATA on the selected USB drive ($backup_usb) will be DESTROYED to create the backup image.\n\nAre you absolutely sure you want to proceed?" 10 70; [ $? -ne 0 ] && return 1; local win_partition; win_partition=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | awk 'NR==1{print $1}'); ( echo 10; echo "### Formatting USB drive $backup_usb... ###"; run_cmd "mkfs.ext4 -F $backup_usb"; sleep 2; echo 25; echo "### Mounting USB drive... ###"; run_cmd "mkdir -p /mnt/backup"; run_cmd "mount $backup_usb /mnt/backup"; sleep 2; echo 50; echo "### Cloning Windows partition (this would take a long time)... ###"; run_cmd "ntfsclone --save-image -o - $win_partition | gzip -c > /mnt/backup/windows_backup.img.gz"; sleep 3; echo 90; echo "### Unmounting USB drive... ###"; run_cmd "umount /mnt/backup"; sleep 2; echo 100; echo "### Backup Simulation Complete! ###"; sleep 1 ) | dialog --backtitle "AcreetionOS Installer" --title "Simulating Backup" --gauge "Please wait..." 10 70 0; dialog --backtitle "AcreetionOS Installer" --title "Backup Complete" --msgbox "The simulation of the Windows backup is complete." 8 60; return 0; }
tui_disk() { local windows_disk=""; mapfile -t devices < <(lsblk -dno NAME); if [ ${#devices[@]} -eq 0 ]; then dialog --title "Error" --msgbox "No disks found. Cannot proceed." 8 40; return; fi; for d in "${devices[@]}"; do if lsblk -fno FSTYPE "/dev/$d" | grep -iq "ntfs"; then windows_disk="/dev/$d"; break; fi; done; local -a disk_options=(); for dev_path in "/dev/"*; do if [[ -b "$dev_path" ]] && [[ "$(lsblk -dno TYPE "$dev_path")" == "disk" ]]; then local label=""; [ "$dev_path" == "$windows_disk" ] && label=" (Windows Detected)"; disk_options+=("$dev_path" "$(lsblk -dno SIZE,MODEL "$dev_path")$label"); fi; done; TARGET_DISK=$(dialog --backtitle "AcreetionOS Installer" --title "Disk Selection (Step 1 of 2)" --cancel-label "Back" --radiolist "Select the physical disk for installation:" 20 70 5 "${disk_options[@]}" "on" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; if [ "$TARGET_DISK" == "$windows_disk" ]; then CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Installation Mode (Step 2 of 2)" --cancel-label "Back" --menu "Windows was detected on $TARGET_DISK. How do you want to proceed?" 15 70 2 "DUAL_BOOT" "Shrink Windows and install alongside" "OVERWRITE" "Wipe Windows and the entire disk" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; INSTALL_MODE=$CHOICE; if [ "$INSTALL_MODE" == "DUAL_BOOT" ]; then DUAL_BOOT_MODE=true; NEW_SIZE=$(dialog --backtitle "AcreetionOS Installer" --title "Dual Boot Setup" --cancel-label "Back" --inputbox "Enter size in GB for the new AcreetionOS partition:" 8 60 "$ARCH_PART_SIZE" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; ARCH_PART_SIZE=$NEW_SIZE; else DUAL_BOOT_MODE=false; dialog --backtitle "AcreetionOS Installer" --title "Windows Backup Option" --yesno "It is STRONGLY recommended to create a backup before overwriting Windows.\n\nWould you like to back up your Windows installation to a USB drive now?" 10 70; if [ $? -eq 0 ]; then tui_windows_backup; [ $? -ne 0 ] && return; else dialog --backtitle "AcreetionOS Installer" --title "!!! FINAL WARNING !!!" --yesno "Are you sure, this will ${C_ERASE} your entire disk, and windows will be gone?" 10 70; [ $? -ne 0 ] && return; fi; fi; else dialog --backtitle "AcreetionOS Installer" --title "Installation Mode (Step 2 of 2)" --yesno "The disk $TARGET_DISK will be completely erased for a clean installation of AcreetionOS.\n\nProceed?" 10 70; [ $? -ne 0 ] && return; INSTALL_MODE="OVERWRITE"; DUAL_BOOT_MODE=false; fi; DISK_CONFIGURED=true; }
tui_user() { while true; do HOSTNAME=$(dialog --backtitle "AcreetionOS Installer" --title "System Configuration" --cancel-label "Back" --inputbox "Enter the hostname for this computer:" 8 60 "$HOSTNAME" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; [ -n "$HOSTNAME" ] && break || dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Hostname cannot be empty." 6 40; done; while true; do USERNAME=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --cancel-label "Back" --inputbox "Enter your username.\n\nThis user will have administrative rights (sudo)." 10 60 "$USERNAME" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; [ -n "$USERNAME" ] && break || dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Username cannot be empty." 6 40; done; while true; do local pass1; pass1=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --insecure --cancel-label "Back" --passwordbox "Enter the password for user '$USERNAME':" 8 60 2>&1 >/dev/tty); [ $? -ne 0 ] && return; local pass2; pass2=$(dialog --backtitle "AcreetionOS Installer" --title "User Account Setup" --insecure --cancel-label "Back" --passwordbox "Confirm the password:" 8 60 2>&1 >/dev/tty); [ $? -ne 0 ] && continue; if [ -z "$pass1" ]; then dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Password cannot be empty. Please try again." 6 40; continue; fi; if [ "$pass1" != "$pass2" ]; then dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Passwords do not match. Please try again." 6 40; continue; fi; USER_PASSWORD=$pass1; break; done; USER_CONFIGURED=true; }
tui_customization_menu() { while true; do CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Software & Customization" --cancel-label "Back to Main Menu" --menu "Select a category to customize:" 20 70 8 "Kernel" "Select the Linux kernel to install" "Nvidia" "Select Nvidia drivers to install" "Fonts" "Select additional TTF fonts" "Gaming" "Select gaming software (Steam, Lutris)" "Browsers" "Select additional web browsers" "Virtualization" "Select virtualization software" "Misc" "Select miscellaneous desktop software" 2>&1 >/dev/tty); [ $? -ne 0 ] && break; case "$CHOICE" in "Kernel") tui_select_kernel ;; "Nvidia") tui_select_nvidia ;; "Fonts") tui_select_fonts ;; "Gaming") tui_select_gaming ;; "Browsers") tui_select_browsers ;; "Virtualization") tui_select_virtualization ;; "Misc") tui_select_misc ;; esac; done; }
tui_select_kernel() { CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Kernel Selection" --cancel-label "Back" --default-item "$KERNEL_PACKAGE" --radiolist "Select which kernel to install. The correct headers will be added automatically." 15 70 4 "linux" "Standard, latest Arch Linux kernel" "on" "linux-lts" "Long Term Support kernel, for stability" "off" "linux-zen" "Performance-tuned kernel (Zen scheduler)" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; KERNEL_PACKAGE=$CHOICE; KERNEL_HEADERS_PACKAGE="${CHOICE}-headers"; CUSTOM_CONFIGURED=true; }
tui_select_nvidia() { CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Nvidia Driver Selection" --cancel-label "Back" --radiolist "If you have an Nvidia GPU, select the appropriate proprietary driver." 15 70 3 "none" "No proprietary drivers (for AMD/Intel/Nouveau)" "on" "latest" "Latest driver for modern GPUs" "off" "legacy" "470xx driver for older GPUs (Kepler series)" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; case "$CHOICE" in "latest") [ "$KERNEL_PACKAGE" == "linux-lts" ] && add_pkg CHROOT_EXTRA_PKGS "nvidia-lts" || add_pkg CHROOT_EXTRA_PKGS "nvidia" ;; "legacy") add_pkg CHROOT_EXTRA_PKGS "nvidia-470xx-dkms" ;; esac; CUSTOM_CONFIGURED=true; }
tui_select_fonts() { CHOICES=$(dialog --backtitle "AcreetionOS Installer" --title "Font Selection" --cancel-label "Back" --separate-output --checklist "Select additional fonts to install:" 20 70 5 "ttf-liberation" "Google's Liberation fonts (common)" "on" "ttf-dejavu" "DejaVu fonts (good coverage)" "on" "ttf-droid" "Google's Droid fonts" "off" "noto-fonts" "Google's Noto fonts (comprehensive)" "off" "ttf-font-awesome" "Iconic font set for apps" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; for CHOICE in $CHOICES; do add_pkg CHROOT_EXTRA_PKGS "$CHOICE"; done; CUSTOM_CONFIGURED=true; }
tui_select_gaming() { CHOICES=$(dialog --backtitle "AcreetionOS Installer" --title "Gaming Software" --cancel-label "Back" --separate-output --checklist "Select gaming software to install:" 20 70 3 "steam" "Valve's Steam platform" "off" "lutris" "Open gaming platform" "off" "steam-native-runtime" "For native Linux games on Steam" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; for CHOICE in $CHOICES; do add_pkg CHROOT_EXTRA_PKGS "$CHOICE"; done; CUSTOM_CONFIGURED=true; }
tui_select_browsers() { CHOICES=$(dialog --backtitle "AcreetionOS Installer" --title "Web Browsers" --cancel-label "Back" --separate-output --checklist "Select browsers to install (requires AUR helper):" 20 70 5 "google-chrome" "Google Chrome (from AUR)" "off" "brave-bin" "Brave Browser (from AUR)" "off" "microsoft-edge-stable-bin" "MS Edge (from AUR)" "off" "librewolf" "Firefox fork focused on privacy" "off" "torguard-bin" "Torguard VPN Client (from AUR)" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; if [ -n "$CHOICES" ]; then add_pkg PACSTRAP_EXTRA_PKGS "base-devel"; add_pkg CHROOT_EXTRA_PKGS "yay-bin"; fi; for CHOICE in $CHOICES; do add_pkg CHROOT_EXTRA_PKGS "$CHOICE"; done; CUSTOM_CONFIGURED=true; }
tui_select_virtualization() { CHOICES=$(dialog --backtitle "AcreetionOS Installer" --title "Virtualization Software" --cancel-label "Back" --separate-output --checklist "Select virtualization software:" 20 70 3 "virtualbox" "Oracle VirtualBox" "off" "virt-manager" "KVM/QEMU frontend (recommended)" "off" "gnome-boxes" "Simple GNOME virtualization app" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; for CHOICE in $CHOICES; do add_pkg CHROOT_EXTRA_PKGS "$CHOICE"; if [ "$CHOICE" == "virtualbox" ]; then add_pkg CHROOT_EXTRA_PKGS "virtualbox-host-dkms"; add_pkg CHROOT_EXTRA_PKGS "virtualbox-guest-iso"; fi; if [ "$CHOICE" == "virt-manager" ]; then add_pkg CHROOT_EXTRA_PKGS "qemu-desktop"; add_pkg CHROOT_EXTRA_PKGS "dnsmasq"; fi; done; CUSTOM_CONFIGURED=true; }
tui_select_misc() { CHOICES=$(dialog --backtitle "AcreetionOS Installer" --title "Miscellaneous Software" --cancel-label "Back" --separate-output --checklist "Select additional software:" 20 70 8 "obs-studio" "Streaming and recording software" "off" "v4l2loopback-dkms" "For virtual webcams (OBS)" "off" "vesktop" "Discord client with better screensharing (AUR)" "off" "discord" "Official Discord client" "off" "libreoffice-fresh" "LibreOffice suite" "off" "timeshift" "System restore utility" "off" "vlc" "Versatile media player" "on" "downgrade" "Tool to downgrade packages (AUR)" "off" 2>&1 >/dev/tty); [ $? -ne 0 ] && return; for CHOICE in $CHOICES; do if [[ "$CHOICE" == "vesktop" || "$CHOICE" == "downgrade" ]]; then add_pkg PACSTRAP_EXTRA_PKGS "base-devel"; add_pkg CHROOT_EXTRA_PKGS "yay-bin"; fi; add_pkg CHROOT_EXTRA_PKGS "$CHOICE"; done; if [[ "$CHOICES" == *"timeshift"* ]]; then add_pkg CHROOT_EXTRA_PKGS "timeshift-autosnap"; add_pkg PACSTRAP_EXTRA_PKGS "base-devel"; add_pkg CHROOT_EXTRA_PKGS "yay-bin"; fi; CUSTOM_CONFIGURED=true; }

tui_review_and_install() {
    local install_mode_text="Overwrite" && [ "$DUAL_BOOT_MODE" = true ] && install_mode_text="Dual Boot"
    local review_text="Review your configuration:\n\n"
    review_text+="    - Target Disk:    $TARGET_DISK\n"
    review_text+="    - Install Mode:   $install_mode_text\n"
    [ "$DUAL_BOOT_MODE" = true ] && review_text+="    - Acreetion Size: ${ARCH_PART_SIZE}GB\n"
    review_text+="    - Hostname:       $HOSTNAME\n"
    review_text+="    - Admin User:     $USERNAME\n"
    review_text+="    - Kernel:         $KERNEL_PACKAGE\n"
    review_text+="    - Extra Packages: $((${#PACSTRAP_EXTRA_PKGS[@]} + ${#CHROOT_EXTRA_PKGS[@]})) selected\n\n"
    review_text+="This is the final step. Proceed with installation?"
    dialog --backtitle "AcreetionOS Installer" --title "Final Confirmation" --yesno "$review_text" 20 60
    return $?
}

# --- Installation Engine ---

partition_and_format() { run_cmd "# --- Partitioning and Formatting Disk: $TARGET_DISK ---"; if [ "$DUAL_BOOT_MODE" = true ]; then run_cmd "# Dual Boot Mode Enabled"; local efi_part; efi_part=$(lsblk -plno NAME,PARTLABEL,FSTYPE "$TARGET_DISK" | grep -i "fat32.*efi" | awk '{print $1}'); local win_part; win_part=$(lsblk -plno NAME,FSTYPE "$TARGET_DISK" | grep -i "ntfs" | sort -k1 | tail -n1 | awk '{print $1}'); run_cmd "# Found EFI partition to reuse: $efi_part"; run_cmd "# Found Windows partition to shrink: $win_part"; run_cmd "# Simulating shrinking Windows partition to free up ${ARCH_PART_SIZE}G"; run_cmd "ntfsresize --no-action --size -${ARCH_PART_SIZE}G $win_part"; run_cmd "# Creating new partition for AcreetionOS in the largest free space..."; run_cmd "sgdisk --largest-new=0 --change-name=0:'AcreetionOS' --typecode=0:8300 $TARGET_DISK"; local arch_root_part; arch_root_part=$(lsblk -plno NAME,PARTLABEL "$TARGET_DISK" | grep 'AcreetionOS' | awk '{print $1}'); run_cmd "# New partition created: $arch_root_part"; run_cmd "mkfs.ext4 -F $arch_root_part"; run_cmd "mount $arch_root_part /mnt"; run_cmd "mkdir -p /mnt/boot"; run_cmd "mount $efi_part /mnt/boot"; else run_cmd "# Overwrite Mode Enabled"; local efi_part="${TARGET_DISK}1"; local root_part="${TARGET_DISK}2"; if [[ $TARGET_DISK == *"nvme"* ]]; then efi_part="${TARGET_DISK}p1"; root_part="${TARGET_DISK}p2"; fi; run_cmd "sgdisk --zap-all $TARGET_DISK"; run_cmd "sgdisk --new=1:0:+512M --typecode=1:ef00 --change-name=1:'EFI System Partition' $TARGET_DISK"; run_cmd "sgdisk --new=2:0:0 --typecode=2:8300 --change-name=2:'AcreetionOS Root' $TARGET_DISK"; run_cmd "mkfs.fat -F32 $efi_part"; run_cmd "mkfs.ext4 -F $root_part"; run_cmd "mount $root_part /mnt"; run_cmd "mkdir -p /mnt/boot"; run_cmd "mount $efi_part /mnt/boot"; fi; }
install_base_system() { run_cmd "# --- Installing Arch Linux Base System ---"; local base_packages="base $KERNEL_PACKAGE linux-firmware $KERNEL_HEADERS_PACKAGE networkmanager git vim grub efibootmgr"; [ "$DUAL_BOOT_MODE" = true ] && base_packages+=" os-prober"; base_packages+=" ${PACSTRAP_EXTRA_PKGS[@]}"; run_cmd "pacstrap -K /mnt $base_packages"; run_cmd "# --- Generating fstab ---"; run_cmd "genfstab -U /mnt >> /mnt/etc/fstab"; }
configure_chroot() { run_cmd "# --- Configuring System Inside Chroot ---"; local chroot_pkgs_string="${CHROOT_EXTRA_PKGS[*]}"; cat > /mnt/setup_chroot.sh <<'EOF'
#!/bin/bash
# Exit on any error
set -e

# --- Script Parameters ---
DUAL_BOOT_MODE=$1; HOSTNAME=$2; USERNAME=$3; USER_PASSWORD=$4; shift 4; CHROOT_PKGS_STRING="$@"

# --- System Configuration ---
echo "--- Configuring base system (timezone, locale, time) ---"
ln -sf /usr/share/zoneinfo/UTC /etc/localtime; hwclock --systohc
sed -i 's/^#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen; locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "${HOSTNAME}" > /etc/hostname
cat > /etc/hosts <<HOSTS_EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   ${HOSTNAME}.localdomain ${HOSTNAME}
HOSTS_EOF

# --- Add Custom Repositories ---
echo "--- Adding AcreetionOS custom repositories ---"
cat >> /etc/pacman.conf <<PACMAN_EOF

#[acreetionOSREPO]
#SigLevel = Optional
#Server = https://darrengames.ddns.net:1500/repo/\$arch

[acreetionOSREPO-main]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/repo-main/\$arch

[personal]
SigLevel = Never
Server = https://darrengames.ddns.net:1500/personal
PACMAN_EOF

echo "--- Synchronizing new repository databases ---"
pacman -Sy

# --- User & Security Setup ---
echo "--- Setting up user accounts and sudo ---"
passwd -l root
useradd -m -G wheel -s /bin/bash "${USERNAME}"; echo "${USERNAME}:${USER_PASSWORD}" | chpasswd
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers

# --- Bootloader Setup ---
echo "--- Installing and configuring GRUB bootloader ---"
if [ "${DUAL_BOOT_MODE}" = true ]; then sed -i 's/#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' /etc/default/grub; fi
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=AcreetionOS
grub-mkconfig -o /boot/grub/grub.cfg

# --- Desktop & Package Installation ---
echo "--- Installing core desktop environment and software ---"
CORE_PKGS="cinnamon gdm gnome-terminal firefox webapp-manager wireguard-tools bluez bluez-utils blueman cups cups-pdf ghostscript gsfonts hplip gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav mint-themes mint-x-icons mint-y-icons fastfetch"
pacman -S --noconfirm --needed ${CORE_PKGS}

echo "--- Installing user-selected optional packages ---"
if [ -n "$CHROOT_PKGS_STRING" ]; then
    REPO_PKGS=(); AUR_PKGS=()
    for pkg in $CHROOT_PKGS_STRING; do
        if pacman -Si "$pkg" &> /dev/null; then
            REPO_PKGS+=("$pkg")
        else
            AUR_PKGS+=("$pkg")
        fi
    done

    if [ ${#REPO_PKGS[@]} -gt 0 ]; then
        echo "Installing repository packages: ${REPO_PKGS[*]}"
        pacman -S --noconfirm --needed "${REPO_PKGS[@]}"
    fi

    if [ ${#AUR_PKGS[@]} -gt 0 ]; then
        echo "Installing AUR packages: ${AUR_PKGS[*]}"
        if command -v yay &> /dev/null; then
            su - "${USERNAME}" -c "yay -S --noconfirm ${AUR_PKGS[*]}"
        else
            echo "WARNING: 'yay' command not found. Cannot install AUR packages."
            echo "Ensure 'yay-bin' is available in one of your configured repositories."
        fi
    fi
fi

# --- Enable System Services ---
echo "--- Enabling essential system services ---"
systemctl enable gdm.service; systemctl enable NetworkManager.service
systemctl enable cups.service; systemctl enable bluetooth.service
# Conditionally enable timeshift timer if it was installed
if [ -f /usr/lib/systemd/system/timeshift-autosnap.service ]; then systemctl enable timeshift-autosnap.service; fi

echo "--- Chroot configuration complete ---"
EOF
chmod +x /mnt/setup_chroot.sh; run_cmd "arch-chroot /mnt /setup_chroot.sh '${DUAL_BOOT_MODE}' '${HOSTNAME}' '${USERNAME}' '${USER_PASSWORD}' '${chroot_pkgs_string}'"; run_cmd "rm /mnt/setup_chroot.sh"; }

# --- New Interactive Installation ---

run_installation_engine() {
    (
        echo 10 > "$PROGRESS_PERCENT_FILE"; echo "Partitioning disk..." > "$PROGRESS_MESSAGE_FILE"
        partition_and_format

        echo 40 > "$PROGRESS_PERCENT_FILE"; echo "Installing base system and packages (this may take a while)..." > "$PROGRESS_MESSAGE_FILE"
        install_base_system

        echo 80 > "$PROGRESS_PERCENT_FILE"; echo "Configuring the new system (chroot)..." > "$PROGRESS_MESSAGE_FILE"
        configure_chroot

        echo 100 > "$PROGRESS_PERCENT_FILE"; echo "Finalizing..." > "$PROGRESS_MESSAGE_FILE"
        sleep 2
    ) >> "$LOG_FILE" 2>&1
}

tui_installation_progress() {
    local install_pid=$1
    sleep 1 # Give the background process a moment to start

    while ps -p $install_pid > /dev/null; do
        local percent=${PERCENT:-0}
        local message=${MESSAGE:-"Starting..."}
        
        [ -f "$PROGRESS_PERCENT_FILE" ] && percent=$(cat "$PROGRESS_PERCENT_FILE")
        [ -f "$PROGRESS_MESSAGE_FILE" ] && message=$(cat "$PROGRESS_MESSAGE_FILE")

        (
            echo "$percent"
            echo "### $message ###"
            echo "Press SPACE to view live installation log"
        ) | dialog --backtitle "AcreetionOS Installer" --title "Installation in Progress" --gauge "Please wait..." 12 70 0
        
        read -s -n 1 -t 0.5 key
        if [[ "$key" == ' ' ]]; then
            dialog --backtitle "AcreetionOS Installer" --title "Live Installation Log ($LOG_FILE)" --tailbox "$LOG_FILE" 40 120
        fi
    done

    echo 100 | dialog --backtitle "AcreetionOS Installer" --title "Installation in Progress" --gauge "Complete!" 10 70 100
    sleep 1
}

# --- Main TUI Loop ---
main() {
    if ! command -v dialog &> /dev/null; then echo "Error: The 'dialog' package is required." >&2; exit 1; fi
    > "$LOG_FILE"
    
    tui_welcome

    while true; do
        local net_status="[INCOMPLETE]" && [ "$NETWORK_CONFIGURED" = true ] && net_status="[COMPLETED]"
        local disk_status="[INCOMPLETE]" && [ "$DISK_CONFIGURED" = true ] && disk_status="[COMPLETED]"
        local user_status="[INCOMPLETE]" && [ "$USER_CONFIGURED" = true ] && user_status="[COMPLETED]"
        local custom_status="[DEFAULT]" && [ "$CUSTOM_CONFIGURED" = true ] && custom_status="[CONFIGURED]"
        
        local menu_options=(
            1 "Configure Network                 $net_status"
            2 "Configure Disk                  $disk_status"
            3 "Setup User & Hostname           $user_status"
            4 "(Optional) Software & Customization $custom_status"
            5 "Review and Install"
            6 "Quit Installer"
        )
        if [ "$INSTALLATION_COMPLETE" = true ]; then
            menu_options[1]="Configure Disk                  [LOCKED]"
            menu_options[4]="Installation Complete - Reboot or Quit"
        fi

        CHOICE=$(dialog --backtitle "AcreetionOS Installer" --title "Main Menu" --cancel-label "Exit" \
                        --menu "Complete the steps in order. After install, you may reboot." 20 70 6 \
                        "${menu_options[@]}" 2>&1 >/dev/tty)
        
        # If user presses ESC or selects Exit/Quit
        if [ $? -ne 0 ]; then
            CHOICE=6
        fi

        case "$CHOICE" in
            1) tui_network ;;
            2)
                if [ "$INSTALLATION_COMPLETE" = true ]; then
                    dialog --backtitle "AcreetionOS Installer" --title "Option Locked" --msgbox "The disk has already been partitioned and installed to. This option is now locked to prevent data loss." 8 60
                else
                    tui_disk
                fi
                ;;
            3) tui_user ;;
            4) tui_customization_menu ;;
            5)
                if [ "$INSTALLATION_COMPLETE" = true ]; then
                    dialog --backtitle "AcreetionOS Installer" --title "Already Done" --msgbox "Installation is already complete. Please choose 'Quit Installer' and select 'Reboot' from the final prompt." 8 70
                elif ! $NETWORK_CONFIGURED || ! $DISK_CONFIGURED || ! $USER_CONFIGURED; then
                    dialog --backtitle "AcreetionOS Installer" --title "Error" --msgbox "Please complete all mandatory steps (1-3) before proceeding." 8 50
                else
                    if tui_review_and_install; then
                        # --- Start Interactive Installation ---
                        clear
                        echo "Starting installation... Press SPACE during progress bar to view logs."
                        echo "Details are also being logged to $LOG_FILE"

                        PROGRESS_PERCENT_FILE=$(mktemp)
                        PROGRESS_MESSAGE_FILE=$(mktemp)
                        trap "rm -f '$PROGRESS_PERCENT_FILE' '$PROGRESS_MESSAGE_FILE'" EXIT

                        run_installation_engine &
                        INSTALL_PID=$!
                        tui_installation_progress $INSTALL_PID
                        trap - EXIT # Clear the trap

                        INSTALLATION_COMPLETE=true
                        dialog --backtitle "AcreetionOS Installer" --title "Complete!" --msgbox "AcreetionOS installation finished successfully!\n\nYou can now reboot or quit to a shell." 8 60
                    fi
                fi
                ;;
            6)
                local prompt_text="Are you sure you want to quit the installer?"
                if [ "$INSTALLATION_COMPLETE" = true ]; then
                    prompt_text="The installation is complete. Would you like to reboot the system now?"
                    dialog --backtitle "AcreetionOS Installer" --title "Reboot System?" --yesno "$prompt_text" 8 60
                    if [ $? -eq 0 ]; then # Yes, reboot
                        run_cmd "umount -R /mnt"
                        run_cmd "reboot"
                        clear; exit 0
                    else # No, exit to shell
                        dialog --backtitle "AcreetionOS Installer" --title "Exiting" --infobox "Exiting to shell..." 4 30 ; sleep 1
                        clear; exit 0
                    fi
                else
                    dialog --backtitle "AcreetionOS Installer" --title "Quit" --yesno "$prompt_text" 6 40
                    [ $? -eq 0 ] && { clear; exit 0; }
                fi
                ;;
        esac
    done
}

# --- Start Script Execution ---
main "$@"
